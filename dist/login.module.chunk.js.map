{"version":3,"sources":["/home/evgeny/workspace/angular5/ngx-admin-ang4/src/app/pages/login/login.component.ts","/home/evgeny/workspace/angular5/ngx-admin-ang4/src/app/pages/login/login.html","/home/evgeny/workspace/angular5/ngx-admin-ang4/src/app/pages/login/login.module.ts","/home/evgeny/workspace/angular5/ngx-admin-ang4/src/app/pages/login/login.routing.ts","/home/evgeny/workspace/angular5/ngx-admin-ang4/src/app/pages/login/login.scss","/home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/Scheduler.js","/home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/add/observable/interval.js","/home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/observable/IntervalObservable.js","/home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/observable/interval.js","/home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/scheduler/Action.js","/home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/scheduler/AsyncAction.js","/home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/scheduler/AsyncScheduler.js","/home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/scheduler/async.js","/home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/util/isNumeric.js"],"names":[],"mappings":"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;AACA;AACA,aAAa;AACb,aAAa;AACb;AACA,eAAe,OAAO;AACtB;AACA,eAAe,UAAU;AACzB;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,YAAY;AAC5C,mCAAmC,2BAA2B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,CAAC;AACD;AACA,8C;;;;;;;;ACvFA;AACA;AACA;AACA,oC;;;;;;;;ACHA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA,uCAAuC,gBAAgB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,OAAO;AACtB;AACA,gBAAgB;AAChB;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA,CAAC;AACD;AACA,kC;;;;;;;;AC3CA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,uC;;;;;;;;AC7IA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,kCAAkC;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,0C;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,WAAW;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC","file":"login.module.chunk.js","sourcesContent":["import {Component, ViewEncapsulation} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {FormGroup, AbstractControl, FormBuilder, Validators} from '@angular/forms';\nimport {EmailValidator} from '../../theme/validators';\n\nimport {UserService} from './../../services/user.service';\nimport {GlobalState} from '../../global.state';\n\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport 'rxjs/add/observable/interval';\n\n@Component({\n  selector: 'login',\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: './login.html',\n  styleUrls: ['./login.scss']\n})\nexport class Login {\n\n  public form:FormGroup;\n  public email:AbstractControl;\n  public password:AbstractControl;\n  public submitAttempt:boolean = false;\n  public isLoggedIn: boolean = false;\n\n  public authSub: Subscription;\n  private loopCount = 100;\n\n  public errorMsg = '';\n\n  constructor(private fb:FormBuilder, private userService: UserService, private router: Router) {\n\n    this.form = fb.group({\n      'email': ['', Validators.compose([Validators.required, Validators.minLength(5), EmailValidator.validate])],\n      'password': ['', Validators.compose([Validators.required, Validators.minLength(6)])]\n    });\n\n    this.email = this.form.controls['email'];\n    this.password = this.form.controls['password'];\n  }\n\n  submitForm(form: any, isValid : boolean ): void{\n    this.submitAttempt = true;\n    if (isValid) {\n      this.userService.login(form.email, form.password).subscribe(user => {\n          if (user) {\n              this.router.navigate(['/']);\n          }\n        },\n        err => { //TODO\n                this.errorMsg = err.json().reason;\n              }\n        );\n    }\n  }\n\n  loginWithProvider(provider: string) {\n    this.userService.loginWithProvider(provider);\n   }\n }\n\n\n\n// WEBPACK FOOTER //\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/src/app/pages/login/login.component.ts","module.exports = \"<div class=\\\"auth-main\\\">\\r\\n  <div class=\\\"auth-block\\\">\\r\\n    <h1>Sign in</h1>\\r\\n    <a routerLink=\\\"/register\\\" class=\\\"auth-link\\\">Want to be a member? Sign up!</a>\\r\\n\\r\\n    <form [formGroup]=\\\"form\\\" novalidate (ngSubmit)=\\\"submitForm(form.value, form.valid)\\\" class=\\\"form-horizontal\\\">\\r\\n      <div class=\\\"form-group row\\\"\\r\\n      [class.has-error]=\\\"!email.valid && submitAttempt\\\"\\r\\n      >\\r\\n      <label for=\\\"inputEmail3\\\" class=\\\"col-sm-2 control-label\\\">Email</label>\\r\\n      <div class=\\\"col-sm-10\\\">\\r\\n        <input [formControl]=\\\"email\\\" type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"inputEmail3\\\" placeholder=\\\"Email\\\">\\r\\n      </div>\\r\\n      <div class=\\\"col-sm-10\\\">\\r\\n        <small *ngIf=\\\"email.hasError('required') && submitAttempt \\\" class=\\\"col-xs-12\\\" style=\\\"padding-left:0\\\">\\r\\n          email ist pflicht\\r\\n        </small>\\r\\n        <small *ngIf=\\\"email.hasError('minlength') && submitAttempt\\\" class=\\\"col-xs-12\\\" style=\\\"padding-left:0\\\">\\r\\n          email muss min 5 Buchstaben enthalten.\\r\\n        </small>\\r\\n        <small *ngIf=\\\"email.hasError('validateEmail') && submitAttempt\\\" class=\\\"col-xs-12\\\" style=\\\"padding-left:0\\\">\\r\\n          Format sollte <i>abcd@xyz.com</i> sein.\\r\\n        </small>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div class=\\\"form-group row\\\" [class.has-error]=\\\"!password.valid && submitAttempt\\\">\\r\\n      <label for=\\\"inputPassword3\\\" class=\\\"col-sm-2 control-label\\\">Password</label>\\r\\n\\r\\n      <div class=\\\"col-sm-10\\\">\\r\\n        <input [formControl]=\\\"password\\\" type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"inputPassword3\\\" placeholder=\\\"Password\\\">\\r\\n      </div>\\r\\n      <div class=\\\"col-sm-10\\\">\\r\\n        <small *ngIf=\\\"password.hasError('required') && submitAttempt \\\" class=\\\"col-xs-12\\\" style=\\\"padding-left:0\\\">\\r\\n          password ist pflicht\\r\\n        </small>\\r\\n        <small *ngIf=\\\"password.hasError('minlength') && submitAttempt\\\" class=\\\"col-xs-12\\\" style=\\\"padding-left:0\\\">\\r\\n          password muss min 6 Buchstaben enthalten.\\r\\n        </small>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group row\\\" *ngIf=\\\"errorMsg\\\" >\\r\\n      <div class=\\\"col-sm-offset-2 col-sm-10\\\">\\r\\n      <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" style=\\\"margin-top:0px; margin-bottom:0px\\\">\\r\\n        <strong>login failed:</strong> {{errorMsg}}\\r\\n      </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"form-group row\\\">\\r\\n      <div class=\\\"col-sm-offset-2 col-sm-10\\\">\\r\\n      <button type=\\\"submit\\\" class=\\\"btn btn-default btn-auth\\\">Sign in</button>\\r\\n      <a routerLink=\\\"/forgotpassword\\\" class=\\\"forgot-pass\\\">Forgot password?</a>\\r\\n    </div>\\r\\n  </div>\\r\\n</form>\\r\\n\\r\\n<div class=\\\"auth-sep\\\"><span><span>or Sign in with one click</span></span></div>\\r\\n\\r\\n<div class=\\\"al-share-auth\\\">\\r\\n  <ul class=\\\"al-share clearfix\\\">\\r\\n    <li>\\r\\n      <a  (click)=\\\"loginWithProvider('facebook')\\\">\\r\\n        <i class=\\\"socicon socicon-facebook\\\" title=\\\"Connect on Facebook\\\"></i>\\r\\n      </a>\\r\\n\\r\\n    </li>\\r\\n      <!--\\r\\n      <li>\\r\\n        <a (click)=\\\"loginWithProvider('twitter')\\\">\\r\\n          <i class=\\\"socicon socicon-twitter\\\" title=\\\"Connect on Twitter\\\"></i>\\r\\n        </a>\\r\\n      </li>\\r\\n    -->\\r\\n    <li>\\r\\n      <a  (click)=\\\"loginWithProvider('google')\\\">\\r\\n        <i class=\\\"socicon socicon-google\\\" title=\\\"Connect on Google\\\"></i>\\r\\n      </a>\\r\\n    </li>\\r\\n  </ul>\\r\\n</div>\\r\\n</div>\\r\\n</div>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/src/app/pages/login/login.html\n// module id = ../../../../../src/app/pages/login/login.html\n// module chunks = login.module","import { NgModule }      from '@angular/core';\r\nimport { CommonModule }  from '@angular/common';\r\nimport { AppTranslationModule } from '../../app.translation.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgaModule } from '../../theme/nga.module';\r\n\r\nimport { Login } from './login.component';\r\nimport { routing }       from './login.routing';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    AppTranslationModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    NgaModule,\r\n    routing\r\n  ],\r\n  declarations: [\r\n    Login\r\n  ]\r\n})\r\nexport class LoginModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/src/app/pages/login/login.module.ts","import { Routes, RouterModule }  from '@angular/router';\r\n\r\nimport { Login } from './login.component';\r\nimport { ModuleWithProviders } from '@angular/core';\r\n\r\n// noinspection TypeScriptValidateTypes\r\nexport const routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: Login\r\n  }\r\n];\r\n\r\nexport const routing: ModuleWithProviders = RouterModule.forChild(routes);\r\n\n\n\n// WEBPACK FOOTER //\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/src/app/pages/login/login.routing.ts","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".auth-main {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-align: center;\\n      -ms-flex-align: center;\\n          align-items: center;\\n  height: 100%;\\n  width: 100%;\\n  position: absolute; }\\n\\n.auth-block {\\n  width: 540px;\\n  margin: 0 auto;\\n  border-radius: 5px;\\n  background: rgba(0, 0, 0, 0.55);\\n  color: #fff;\\n  padding: 32px; }\\n\\n.auth-block h1 {\\n    font-weight: 300;\\n    margin-bottom: 28px;\\n    text-align: center; }\\n\\n.auth-block p {\\n    font-size: 16px; }\\n\\n.auth-block a {\\n    text-decoration: none;\\n    outline: none;\\n    -webkit-transition: all 0.2s ease;\\n    transition: all 0.2s ease;\\n    color: #00abff; }\\n\\n.auth-block a:hover {\\n      color: #0091d9; }\\n\\n.auth-block .control-label {\\n    padding-top: 11px;\\n    color: #ffffff; }\\n\\n.auth-block .form-group {\\n    margin-bottom: 12px; }\\n\\n.auth-input {\\n  width: 300px;\\n  margin-bottom: 24px; }\\n\\n.auth-input input {\\n    display: block;\\n    width: 100%;\\n    border: none;\\n    font-size: 16px;\\n    padding: 4px 10px;\\n    outline: none; }\\n\\na.forgot-pass {\\n  display: block;\\n  text-align: right;\\n  margin-bottom: -20px;\\n  float: right;\\n  z-index: 2;\\n  position: relative; }\\n\\n.auth-link {\\n  display: block;\\n  font-size: 16px;\\n  text-align: center;\\n  margin-bottom: 33px; }\\n\\n.auth-sep {\\n  margin-top: 36px;\\n  margin-bottom: 24px;\\n  line-height: 20px;\\n  font-size: 16px;\\n  text-align: center;\\n  display: block;\\n  position: relative; }\\n\\n.auth-sep > span {\\n    display: table-cell;\\n    width: 30%;\\n    white-space: nowrap;\\n    padding: 0 24px;\\n    color: #ffffff; }\\n\\n.auth-sep > span > span {\\n      margin-top: -12px;\\n      display: block; }\\n\\n.auth-sep:before, .auth-sep:after {\\n    border-top: solid 1px #ffffff;\\n    content: \\\"\\\";\\n    height: 1px;\\n    width: 35%;\\n    display: table-cell; }\\n\\n.al-share-auth {\\n  text-align: center; }\\n\\n.al-share-auth .al-share {\\n    float: none;\\n    margin: 0;\\n    padding: 0;\\n    display: inline-block; }\\n\\n.al-share-auth .al-share li {\\n      margin-left: 24px; }\\n\\n.al-share-auth .al-share li:first-child {\\n        margin-left: 0; }\\n\\n.al-share-auth .al-share li i {\\n        font-size: 24px; }\\n\\n.btn-auth {\\n  color: #ffffff !important; }\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/src/app/pages/login/login.scss\n// module id = ../../../../../src/app/pages/login/login.scss\n// module chunks = login.module","\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n//# sourceMappingURL=Scheduler.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/Scheduler.js\n// module id = ../../../../rxjs/Scheduler.js\n// module chunks = login.module","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar interval_1 = require('../../observable/interval');\nObservable_1.Observable.interval = interval_1.interval;\n//# sourceMappingURL=interval.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/add/observable/interval.js\n// module id = ../../../../rxjs/add/observable/interval.js\n// module chunks = login.module","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = (function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async_1.async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable_1.Observable));\nexports.IntervalObservable = IntervalObservable;\n//# sourceMappingURL=IntervalObservable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/observable/IntervalObservable.js\n// module id = ../../../../rxjs/observable/IntervalObservable.js\n// module chunks = login.module","\"use strict\";\nvar IntervalObservable_1 = require('./IntervalObservable');\nexports.interval = IntervalObservable_1.IntervalObservable.create;\n//# sourceMappingURL=interval.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/observable/interval.js\n// module id = ../../../../rxjs/observable/interval.js\n// module chunks = login.module","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n//# sourceMappingURL=Action.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/scheduler/Action.js\n// module id = ../../../../rxjs/scheduler/Action.js\n// module chunks = login.module","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.delay = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/scheduler/AsyncAction.js\n// module id = ../../../../rxjs/scheduler/AsyncAction.js\n// module chunks = login.module","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n//# sourceMappingURL=AsyncScheduler.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/scheduler/AsyncScheduler.js\n// module id = ../../../../rxjs/scheduler/AsyncScheduler.js\n// module chunks = login.module","\"use strict\";\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n//# sourceMappingURL=async.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/scheduler/async.js\n// module id = ../../../../rxjs/scheduler/async.js\n// module chunks = login.module","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nfunction isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\nexports.isNumeric = isNumeric;\n;\n//# sourceMappingURL=isNumeric.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/evgeny/workspace/angular5/ngx-admin-ang4/node_modules/rxjs/util/isNumeric.js\n// module id = ../../../../rxjs/util/isNumeric.js\n// module chunks = login.module"],"sourceRoot":"webpack:///"}